#!/bin/bash

APP_PATH=`pwd`

function compute_classpath()
{
	## Computing of names and classpath with ununderstandable
	
	#WAR_NAME=`find $APP_PATH/target -type f -name \*.war`
	#WAR_NAME=${WAR_NAME#$APP_PATH/target/} 
	#APP_NAME=${WAR_NAME%.war}
	#WEBAPP_PATH=$APP_PATH/target/$APP_NAME
	#LIBS=$WEBAPP_PATH/WEB-INF/lib
	
	LIBS=$WEBFWK_HOME/lib
	LIBS_CLASSPATH=`find $LIBS -type f -name \*.jar` 
	LIBS_CLASSPATH=`echo $LIBS_CLASSPATH | tr ' ' ':'`
	
	USER_LIBS=$APP_PATH/lib
	USER_LIBS_CLASSPATH=`find $USER_LIBS -type f -name \*.jar` 
	USER_LIBS_CLASSPATH=`echo $USER_LIBS_CLASSPATH | tr ' ' ':'`
	
	SOURCES=$APP_PATH/src/main/java
	RESOURCES=$APP_PATH/src/main/resources
	CONF=$APP_PATH/src/main/webapp/conf
	
	FILES=`find $SOURCES -type f -name \*.java` 
	
	## end of computing with ununderstandable bash commands
	return
}

function launch() 
{	
	case $1 in
	 "")
	  APP_PATH=`pwd`
	  ;;
	 ".")
	  APP_PATH=`pwd`
	  ;;
	 *)
	  APP_PATH=$1
	  ;;
	esac	
	echo "the application is located @" $APP_PATH
	
	if ( ! test -e $APP_PATH/lib)
	then
		mkdir $APP_PATH/lib
	fi
	
	compute_classpath
	
	if ( ! test -e $APP_PATH/target)
	then
		mkdir $APP_PATH/target
	fi
	if ( ! test -e $APP_PATH/target/classes)
	then
		mkdir $APP_PATH/target/classes
		javac -encoding utf-8 -source 1.6 -target 1.6 -d $APP_PATH/target/classes \
		-classpath $RESOURCES:$CONF:$LIBS_CLASSPATH:$USER_LIBS_CLASSPATH $FILES
	fi	
		echo " "
		rm -rf $APP_PATH/target/compclasses
		mkdir $APP_PATH/target/compclasses
		
		## starting the Grizzly server
		
		java -agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n \
		-classpath $APP_PATH/target/classes:$APP_PATH/target/compclasses:$RESOURCES:$CONF:$LIBS_CLASSPATH:$USER_LIBS_CLASSPATH \
		cx.ath.mancel01.webframework.integration.grizzly.GrizzlyServerLauncher $APP_PATH
		
		## for starting the sun webserver
		
		#cx.ath.mancel01.webframework.integration.httpserver.WebServerLauncher
		
	return
}

function classpath()
{
	compute_classpath
	echo -classpath $WEBAPP_PATH/WEB-INF/classes:$RESOURCES:$CONF:$LIBS_CLASSPATH
	return
}

function new() 
{	
	case $1 in
	 "")
	  APP_PATH=`pwd`
	  ;;
	 ".")
	  APP_PATH=`pwd`
	  ;;
	 *)
	  if ( ! test -e $1)
	  then
		  mkdir $1
	  fi
	  APP_PATH=$1
	  ;;
	esac	
	echo "the application is created @" $APP_PATH
	cp $WEBFWK_HOME/scripts/pom.xml $APP_PATH
	cp $WEBFWK_HOME/scripts/build.xml $APP_PATH
	cp -r $WEBFWK_HOME/new-project/src $APP_PATH
	return
}

function createController() 
{
	NAME=$1
	TEMPLATES=$WEBFWK_HOME/templates	
	OLD='${classname}'
	LOWER=`echo $NAME | tr "[:upper:]" "[:lower:]"`
	echo "creating src/main/java/app/controller/$NAME.java"
	sed "s/$OLD/$NAME/g" $TEMPLATES/ControllerTemplate.java > src/main/java/app/controller/$NAME.java
	echo "creating src/main/webapp/views/$LOWER"
	mkdir src/main/webapp/views/$LOWER
	echo "creating src/main/webapp/views/$LOWER/index.html"
	cp $WEBFWK_HOME/new-project/src/main/webapp/views/mycontroller/index.html src/main/webapp/views/$LOWER/index.html
	sed "s/configureBindings() {/configureBindings() {registerController($NAME.class);/g" src/main/java/app/binder/AppBinder.java > src/main/java/app/binder/AppBinder2.java
	mv -f src/main/java/app/binder/AppBinder2.java src/main/java/app/binder/AppBinder.java
	rm -f src/main/java/app/binder/AppBinder2.java
	echo ""
	return;
}

function createLogin() 
{
	NAME=$1
	TEMPLATES=$WEBFWK_HOME/templates	
	OLD='${classname}'
	LOWER=`echo $NAME | tr "[:upper:]" "[:lower:]"`
	mkdir src/main/java/app/services
	echo "creating login module impl @ src/main/java/app/services/$NAME.java"
	sed "s/$OLD/$NAME/g" $TEMPLATES/LoginModuleImplTemplate.java > src/main/java/app/services/$NAME.java
	sed "s/configureBindings() {/configureBindings() {registerController(cx.ath.mancel01.webframework.security.SecurityController.class);bind(cx.ath.mancel01.webframework.security.LoginModule.class).to(app.services.$NAME.class);/g" src/main/java/app/binder/AppBinder.java > src/main/java/app/binder/AppBinder2.java
	mv -f src/main/java/app/binder/AppBinder2.java src/main/java/app/binder/AppBinder.java
	rm -f src/main/java/app/binder/AppBinder2.java
	echo ""
	return;
}

function createModel() 
{
	NAME=$1
	TEMPLATES=$WEBFWK_HOME/templates	
	OLD='${classname}'
	LOWER=`echo $NAME | tr "[:upper:]" "[:lower:]"`
	mkdir src/main/java/app/model
	echo "creating model @ src/main/java/app/model/$NAME.java"
	sed "s/$OLD/$NAME/g" $TEMPLATES/ModelTemplate.java > src/main/java/app/model/$NAME.java
	echo ""
	return;
}

function createBinder() 
{
	NAME=$1
	TEMPLATES=$WEBFWK_HOME/templates	
	OLD='${classname}'
	LOWER=`echo $NAME | tr "[:upper:]" "[:lower:]"`
	echo "creating binder @ src/main/java/app/binder/$NAME.java"
	sed "s/$OLD/$NAME/g" $TEMPLATES/BinderTemplate.java > src/main/java/app/binder/$NAME.java
	echo ""
	return;
}

function createService() 
{
	NAME=$1
	TEMPLATES=$WEBFWK_HOME/templates	
	OLD='${classname}'
	LOWER=`echo $NAME | tr "[:upper:]" "[:lower:]"`
	mkdir src/main/java/app/services
	echo "creating src/main/java/app/services/$NAME.java"
	sed "s/$OLD/$NAME/g" $TEMPLATES/ServiceTemplate.java > src/main/java/app/services/$NAME.java
	echo ""
	return;
}

function war()
{
	case $1 in
	 "")
	  APP_PATH=`pwd`
	  ;;
	 ".")
	  APP_PATH=`pwd`
	  ;;
	 *)
	  APP_PATH=$1
	  ;;
	esac	
	compute_classpath
	mkdir $APP_PATH/classes
	javac -encoding utf-8 -source 1.6 -target 1.6 -d $APP_PATH/classes \
	-classpath $RESOURCES:$CONF:$LIBS_CLASSPATH:$USER_LIBS_CLASSPATH $FILES
	rm -rf $APP_PATH/war
	mkdir $APP_PATH/war
	cp -r $APP_PATH/src $APP_PATH/war/
	mkdir $APP_PATH/war/META-INF
	cp -r $APP_PATH/src/main/webapp/WEB-INF $APP_PATH/war/
	rm -rf $APP_PATH/war/WEB-INF/classes
	cp -r $APP_PATH/classes $APP_PATH/war/WEB-INF/classes
	rm -rf $APP_PATH/classes
	rm -rf $APP_PATH/war/WEB-INF/lib
	cp -r $APP_PATH/lib $APP_PATH/war/WEB-INF/lib
	cp -r $WEBFWK_HOME/lib $APP_PATH/war/WEB-INF/
	cp -r $APP_PATH/src/main/resources $APP_PATH/war/META-INF
	echo "creating war @" $APP_PATH/war
	zip -9 -r $APP_PATH/application.war $APP_PATH/war
	return;
}

_completion() 
{
    local cur opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    opts="new run create-model create-controller create-binder create-service create-loginmodule war --help"
    COMPREPLY=( $(compgen -W "${opts}" ${cur}) )
    return 0
}

function echoStart()
{
	echo " "
	echo "|==========================================|"
	echo "|                                          |"
	echo "| Welcome in the web-framework framework ! |"
	echo "|                                          |"
	echo "|       web-framework version 0.1a         |"
	echo "|                                          |"
	echo "|==========================================|"
	echo " "
	return;
}

function displayHelp()
{
	echoStart
	echo "You can use the following commands :"
	echo " "
	echo "  new 			create a new application"
	echo "  run 			run the specified application"
	echo "  create-model 		create a new entity in the app.model package"
	echo "  create-controller 	create a new controller in the app.controller package"
	echo "  create-binder 	create a new binder to configure dependency injection"
	echo "  create-service 	create a new service in the app.services package"
	echo "  create-loginmodule 	create a new service to implements authentication methods"
	echo "  war 			create a war with the specified application"
	echo "  --help 		display help"
	echo " "
	echo "Have fun :)"
	echo " "
	return;
}

case $1 in
 new)
  echoStart
  new $2
  ;;
 run)
  echoStart
  launch $2
  ;;
 create-model)
  echoStart
  createModel $2
  ;;
 create-binder)
  echoStart
  createBinder $2
  ;;
 create-controller)
  echoStart
  createController $2
  ;;
 create-loginmodule)
  echoStart
  createLogin $2
  ;;
 create-service)
  echoStart
  createService $2
  ;;
 war)
  echoStart
  war $2
  ;;
 --help)
  displayHelp
  ;;
 *)
  #echo "display the help :)"
  ;;
esac

complete -F _completion -o filenames webfwk
